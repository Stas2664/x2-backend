// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
require('dotenv').config();

const express = require('express');
const cors = require('cors');
const bodyParser = require('body-parser');
const path = require('path');
const https = require('https');
const { getDatabase } = require('./database');

const { initDatabase } = require('./database');
const animalsRouter = require('./routes/animals');
const feedsRouter = require('./routes/feeds');
const calculationsRouter = require('./routes/calculations');
const { router: authRouter } = require('./routes/auth');
const syncRouter = require('./routes/sync');

const app = express();

// ======== CORS CONFIGURATION ========
const allowedOrigins = [
  "http://localhost:3000",
  "https://x2-frontend-gmwx.vercel.app"
];

const corsOptions = {
  origin: function (origin, callback) {
    if (!origin || allowedOrigins.includes(origin)) {
      callback(null, true);
    } else {
      callback(new Error("Not allowed by CORS"));
    }
  },
  credentials: true
};

app.use(cors(corsOptions));
// ====================================


// ======== CORS CONFIGURATION ========





// ====================================


// ======== CORS CONFIGURATION ========





// ====================================

const PORT = process.env.PORT || 3001;

// CORS –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞


// Middleware

app.use(bodyParser.json({ limit: '50mb' }));
app.use(bodyParser.urlencoded({ extended: true, limit: '50mb' }));

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
app.use((req, res, next) => {
  console.log(`${new Date().toISOString()} - ${req.method} ${req.path}`);
  next();
});

// Health check - —É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
app.get('/api/health', (req, res) => {
  res.json({ 
    status: 'OK', 
    message: 'VetFormuLab Backend API —Ä–∞–±–æ—Ç–∞–µ—Ç!',
    env: process.env.NODE_ENV || 'development',
    timestamp: new Date().toISOString(),
    port: PORT,
    cors: 'enabled'
  });
});

// Routes
app.use('/api/auth', authRouter);
app.use('/api/animals', animalsRouter);
app.use('/api/feeds', feedsRouter);
app.use('/api/calculations', calculationsRouter);
app.use('/api/sync', syncRouter);

// API –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
app.get('/', (req, res) => {
  res.json({ 
    message: 'VetFormuLab API Server —Ä–∞–±–æ—Ç–∞–µ—Ç!', 
    status: 'running',
    version: '1.0.0',
    port: PORT,
    environment: process.env.NODE_ENV || 'development',
    endpoints: {
      health: '/api/health',
      auth: '/api/auth',
      animals: '/api/animals',
      feeds: '/api/feeds',
      calculations: '/api/calculations',
      sync: '/api/sync'
    },
    cors: {
      enabled: true,
      origins: corsOptions.origin
    },
    documentation: 'API –¥–ª—è VetFormuLab - –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã —Ä–∞—Å—á–µ—Ç–∞ –ø–∏—Ç–∞–Ω–∏—è –∂–∏–≤–æ—Ç–Ω—ã—Ö'
  });
});

// 404 –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤
app.get('*', (req, res) => {
  if (req.path.startsWith('/api/')) {
    res.status(404).json({ 
      error: 'API endpoint not found', 
      available_endpoints: ['/api/health', '/api/auth', '/api/animals', '/api/feeds', '/api/calculations', '/api/sync']
    });
  } else {
    res.status(404).json({ 
      error: 'Not Found', 
      message: '–≠—Ç–æ API —Å–µ—Ä–≤–µ—Ä. –§—Ä–æ–Ω—Ç–µ–Ω–¥ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–º –¥–æ–º–µ–Ω–µ.',
      api_url: `${req.protocol}://${req.get('host')}/api/health`
    });
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
app.use((err, req, res, next) => {
  console.error('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', err);
  res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
console.log('üîÑ –ó–∞–ø—É—Å–∫ VetFormuLab Backend —Å–µ—Ä–≤–µ—Ä–∞...');
console.log('üìÅ –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è:', process.cwd());
console.log('üîß Node.js –≤–µ—Ä—Å–∏—è:', process.version);

initDatabase().then(() => {
  app.listen(PORT, '0.0.0.0', () => {
    console.log('=====================================');
    console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    console.log(`üìñ API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: http://localhost:${PORT}/api/health`);
    console.log(`üåê –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:${PORT}`);
    console.log(`‚úÖ CORS –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è: ${allowedOrigins.join(', ')}`);
    console.log('=====================================');
  });

  // –ê–≤—Ç–æ–∏–º–ø–æ—Ä—Ç –∏–∑ Google Sheets –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ)
  const sheetUrl = process.env.GOOGLE_SHEETS_URL;
  if (sheetUrl) {
    console.log('üü¢ –ù–∞–π–¥–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è GOOGLE_SHEETS_URL ‚Äî –∑–∞–ø—É—â—É –∞–≤—Ç–æ–∏–º–ø–æ—Ä—Ç –∫–æ—Ä–º–∞ –∏–∑ Google Sheets');
    
    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å Google Sheets
    const googleSheetsService = require('./services/googleSheets');
    
    const runAutoImport = async () => {
      try {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å
        const initialized = await googleSheetsService.initialize();
        if (!initialized) {
          console.log('‚ö†Ô∏è Google Sheets —Å–µ—Ä–≤–∏—Å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞—é –∞–≤—Ç–æ–∏–º–ø–æ—Ä—Ç');
          return;
        }

        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        const feedsData = await googleSheetsService.getFeedsData();
        if (feedsData.length === 0) {
          console.log('‚ö†Ô∏è Google Sheets: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞');
          return;
        }

        console.log(`üìä –ü–æ–ª—É—á–µ–Ω–æ ${feedsData.length} –∫–æ—Ä–º–æ–≤ –∏–∑ Google Sheets`);

        const db = getDatabase();
        const clearOnImport = process.env.CLEAR_FEEDS_ON_IMPORT === '1';
        
        db.serialize(() => {
          if (clearOnImport) {
            db.run('DELETE FROM feeds WHERE user_id IS NULL', (err) => {
              if (err) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å—Ç–∞—Ä—ã—Ö –∫–æ—Ä–º–æ–≤:', err);
                return;
              }
              console.log('üóëÔ∏è –°—Ç–∞—Ä—ã–µ –ø—É–±–ª–∏—á–Ω—ã–µ –∫–æ—Ä–º–∞ —É–¥–∞–ª–µ–Ω—ã');
            });
          }

          const stmt = db.prepare(`
            INSERT INTO feeds (
              user_id, name, brand, type, animal_type, category, metabolic_energy, 
              protein, fat, carbohydrates, fiber, ash, moisture, calcium, phosphorus,
              sodium, potassium, magnesium, iron, zinc, copper, manganese, selenium, iodine,
              vitamin_a, vitamin_d, vitamin_e, vitamin_k, vitamin_b1, vitamin_b2, vitamin_b3,
              vitamin_b5, vitamin_b6, vitamin_b7, vitamin_b9, vitamin_b12, vitamin_c,
              ingredients, notes, price_per_kg, is_available, is_public, created_at, updated_at
            ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
          `);

          let imported = 0;
          let errors = 0;

          feedsData.forEach((feed) => {
            const values = [
              null, // user_id (NULL –¥–ª—è –ø—É–±–ª–∏—á–Ω—ã—Ö –∫–æ—Ä–º–æ–≤)
              feed.name,
              feed.brand,
              feed.type,
              feed.animal_type,
              feed.category,
              feed.metabolic_energy,
              feed.protein,
              feed.fat,
              feed.carbohydrates,
              feed.fiber,
              feed.ash,
              feed.moisture,
              feed.calcium,
              feed.phosphorus,
              feed.sodium,
              feed.potassium,
              feed.magnesium,
              feed.iron,
              feed.zinc,
              feed.copper,
              feed.manganese,
              feed.selenium,
              feed.iodine,
              feed.vitamin_a,
              feed.vitamin_d,
              feed.vitamin_e,
              feed.vitamin_k,
              feed.vitamin_b1,
              feed.vitamin_b2,
              feed.vitamin_b3,
              feed.vitamin_b5,
              feed.vitamin_b6,
              feed.vitamin_b7,
              feed.vitamin_b9,
              feed.vitamin_b12,
              feed.vitamin_c,
              feed.ingredients,
              feed.notes,
              feed.price_per_kg,
              feed.is_available ? 1 : 0,
              feed.is_public ? 1 : 0,
              new Date().toISOString(),
              new Date().toISOString()
            ];

            stmt.run(values, function(err) {
              if (err) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ –∫–æ—Ä–º–∞ ${feed.name}:`, err);
                errors++;
              } else {
                imported++;
                console.log(`‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –∫–æ—Ä–º: ${feed.name} (${feed.brand})`);
              }

              if (imported + errors === feedsData.length) {
                stmt.finalize((finalizeErr) => {
                  if (finalizeErr) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–≤—Ç–æ–∏–º–ø–æ—Ä—Ç–∞:', finalizeErr);
                  } else {
                    console.log(`‚úÖ –ê–≤—Ç–æ–∏–º–ø–æ—Ä—Ç –∏–∑ Google Sheets –∑–∞–≤–µ—Ä—à—ë–Ω: ${imported} –∫–æ—Ä–º–æ–≤ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ, ${errors} –æ—à–∏–±–æ–∫`);
                  }
                });
              }
            });
          });
        });

      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–∏–º–ø–æ—Ä—Ç–∞ –∏–∑ Google Sheets:', error.message);
      }
    };

    // –°—Ç–∞—Ä—Ç —á–µ—Ä–µ–∑ –∫–æ—Ä–æ—Ç–∫—É—é –∑–∞–¥–µ—Ä–∂–∫—É, —á—Ç–æ–±—ã —Å–µ—Ä–≤–µ—Ä –ø–æ–¥–Ω—è–ª—Å—è
    setTimeout(runAutoImport, 1500);
  } else {
    console.log('‚ÑπÔ∏è –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è GOOGLE_SHEETS_URL –Ω–µ —É–∫–∞–∑–∞–Ω–∞ ‚Äî –∞–≤—Ç–æ–∏–º–ø–æ—Ä—Ç –∫–æ—Ä–º–æ–≤ –æ—Ç–∫–ª—é—á–µ–Ω');
  }
}).catch(err => {
  console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', err);
  console.error('–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏:', err.message);
  process.exit(1);
}); 