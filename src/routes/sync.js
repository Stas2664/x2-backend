const express = require('express');
const router = express.Router();
const googleSheetsService = require('../services/googleSheets');
const { getDatabase } = require('../database');

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets
router.get('/status', async (req, res) => {
  try {
    const status = await googleSheetsService.checkAccess();
    res.json({
      success: true,
      data: status
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–æ—Ä–º–æ–≤ –∏–∑ Google Sheets
router.post('/feeds', async (req, res) => {
  try {
    const { clearExisting = false, range = '–õ–∏—Å—Ç1!A:Z' } = req.body;
    
    console.log('üîÑ –ù–∞—á–∏–Ω–∞—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –∫–æ—Ä–º–æ–≤ –∏–∑ Google Sheets...');
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Google Sheets
    const feedsData = await googleSheetsService.getFeedsData(range);
    
    if (feedsData.length === 0) {
      return res.json({
        success: true,
        message: '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏',
        imported: 0
      });
    }

    const db = getDatabase();
    
    // –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    db.serialize(() => {
      db.run('BEGIN TRANSACTION');
      
      try {
        // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—É–±–ª–∏—á–Ω—ã–µ –∫–æ—Ä–º–∞ –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è
        if (clearExisting) {
          db.run('DELETE FROM feeds WHERE user_id IS NULL', (err) => {
            if (err) {
              console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å—Ç–∞—Ä—ã—Ö –∫–æ—Ä–º–æ–≤:', err);
              db.run('ROLLBACK');
              return res.status(500).json({
                success: false,
                error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å—Ç–∞—Ä—ã—Ö –∫–æ—Ä–º–æ–≤'
              });
            }
            console.log('üóëÔ∏è –°—Ç–∞—Ä—ã–µ –∫–æ—Ä–º–∞ —É–¥–∞–ª–µ–Ω—ã');
          });
        }

        // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
        const stmt = db.prepare(`
          INSERT INTO feeds (
            user_id, name, brand, type, animal_type, category, metabolic_energy, 
            protein, fat, carbohydrates, fiber, ash, moisture, calcium, phosphorus,
            sodium, potassium, magnesium, iron, zinc, copper, manganese, selenium, iodine,
            vitamin_a, vitamin_d, vitamin_e, vitamin_k, vitamin_b1, vitamin_b2, vitamin_b3,
            vitamin_b5, vitamin_b6, vitamin_b7, vitamin_b9, vitamin_b12, vitamin_c,
            ingredients, notes, price_per_kg, is_available, is_public, created_at, updated_at
          ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
        `);

        let imported = 0;
        let errors = 0;

        // –í—Å—Ç–∞–≤–ª—è–µ–º –∫–æ—Ä–º–∞
        feedsData.forEach((feed, index) => {
          const values = [
            null, // user_id (NULL –¥–ª—è –ø—É–±–ª–∏—á–Ω—ã—Ö –∫–æ—Ä–º–æ–≤)
            feed.name,
            feed.brand,
            feed.type,
            feed.animal_type,
            feed.category,
            feed.metabolic_energy,
            feed.protein,
            feed.fat,
            feed.carbohydrates,
            feed.fiber,
            feed.ash,
            feed.moisture,
            feed.calcium,
            feed.phosphorus,
            feed.sodium,
            feed.potassium,
            feed.magnesium,
            feed.iron,
            feed.zinc,
            feed.copper,
            feed.manganese,
            feed.selenium,
            feed.iodine,
            feed.vitamin_a,
            feed.vitamin_d,
            feed.vitamin_e,
            feed.vitamin_k,
            feed.vitamin_b1,
            feed.vitamin_b2,
            feed.vitamin_b3,
            feed.vitamin_b5,
            feed.vitamin_b6,
            feed.vitamin_b7,
            feed.vitamin_b9,
            feed.vitamin_b12,
            feed.vitamin_c,
            feed.ingredients,
            feed.notes,
            feed.price_per_kg,
            feed.is_available ? 1 : 0,
            feed.is_public ? 1 : 0,
            new Date().toISOString(),
            new Date().toISOString()
          ];

          stmt.run(values, function(err) {
            if (err) {
              console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ –∫–æ—Ä–º–∞ ${feed.name}:`, err);
              errors++;
            } else {
              imported++;
              console.log(`‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –∫–æ—Ä–º: ${feed.name} (${feed.brand})`);
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
            if (imported + errors === feedsData.length) {
              stmt.finalize((finalizeErr) => {
                if (finalizeErr) {
                  console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–º–ø–æ—Ä—Ç–∞:', finalizeErr);
                  db.run('ROLLBACK');
                  return res.status(500).json({
                    success: false,
                    error: '–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–º–ø–æ—Ä—Ç–∞'
                  });
                }

                // –§–∏–∫—Å–∏—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
                db.run('COMMIT', (commitErr) => {
                  if (commitErr) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ —Ñ–∏–∫—Å–∞—Ü–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', commitErr);
                    return res.status(500).json({
                      success: false,
                      error: '–û—à–∏–±–∫–∞ —Ñ–∏–∫—Å–∞—Ü–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏'
                    });
                  }

                  console.log(`‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${imported} –∫–æ—Ä–º–æ–≤ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ, ${errors} –æ—à–∏–±–æ–∫`);
                  
                  res.json({
                    success: true,
                    message: '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ',
                    imported,
                    errors,
                    total: feedsData.length
                  });
                });
              });
            }
          });
        });

      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', error);
        db.run('ROLLBACK');
        res.status(500).json({
          success: false,
          error: '–û—à–∏–±–∫–∞ –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏'
        });
      }
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error);
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
router.get('/stats', async (req, res) => {
  try {
    const db = getDatabase();
    
    db.get('SELECT COUNT(*) as total_feeds FROM feeds WHERE user_id IS NULL', (err, result) => {
      if (err) {
        return res.status(500).json({
          success: false,
          error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏'
        });
      }

      // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–∏–ø–∞–º –∂–∏–≤–æ—Ç–Ω—ã—Ö
      db.get('SELECT COUNT(*) as dog_feeds FROM feeds WHERE user_id IS NULL AND animal_type = "dog"', (err, dogResult) => {
        if (err) {
          return res.status(500).json({
            success: false,
            error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Å–æ–±–∞–∫–∞–º'
          });
        }

        db.get('SELECT COUNT(*) as cat_feeds FROM feeds WHERE user_id IS NULL AND animal_type = "cat"', (err, catResult) => {
          if (err) {
            return res.status(500).json({
              success: false,
              error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∫–æ—à–∫–∞–º'
            });
          }

          // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
          db.get('SELECT MAX(updated_at) as last_update FROM feeds WHERE user_id IS NULL', (err, updateResult) => {
            if (err) {
              return res.status(500).json({
                success: false,
                error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è'
              });
            }

            res.json({
              success: true,
              data: {
                total_feeds: result.total_feeds,
                dog_feeds: dogResult.dog_feeds,
                cat_feeds: catResult.cat_feeds,
                last_update: updateResult.last_update,
                google_sheets_url: process.env.GOOGLE_SHEETS_URL
              }
            });
          });
        });
      });
    });

  } catch (error) {
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –∫–æ—Ä–º–æ–≤
router.post('/feeds/reload', async (req, res) => {
  try {
    console.log('üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –∫–æ—Ä–º–æ–≤ –∏–∑ Google Sheets...');
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Google Sheets
    const feedsData = await googleSheetsService.getFeedsData();
    
    if (feedsData.length === 0) {
      return res.json({
        success: true,
        message: '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏',
        imported: 0
      });
    }

    const db = getDatabase();
    
    // –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–∞–µ–º –∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º
    db.serialize(() => {
      db.run('DELETE FROM feeds WHERE user_id IS NULL', (err) => {
        if (err) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫–æ—Ä–º–æ–≤:', err);
          return res.status(500).json({
            success: false,
            error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫–æ—Ä–º–æ–≤'
          });
        }

        console.log('üóëÔ∏è –í—Å–µ –ø—É–±–ª–∏—á–Ω—ã–µ –∫–æ—Ä–º–∞ —É–¥–∞–ª–µ–Ω—ã');

        // –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        const stmt = db.prepare(`
          INSERT INTO feeds (
            user_id, name, brand, type, animal_type, category, metabolic_energy, 
            protein, fat, carbohydrates, fiber, ash, moisture, calcium, phosphorus,
            sodium, potassium, magnesium, iron, zinc, copper, manganese, selenium, iodine,
            vitamin_a, vitamin_d, vitamin_e, vitamin_k, vitamin_b1, vitamin_b2, vitamin_b3,
            vitamin_b5, vitamin_b6, vitamin_b7, vitamin_b9, vitamin_b12, vitamin_c,
            ingredients, notes, price_per_kg, is_available, is_public, created_at, updated_at
          ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
        `);

        let imported = 0;
        let errors = 0;

        feedsData.forEach((feed) => {
          const values = [
            null, // user_id
            feed.name,
            feed.brand,
            feed.type,
            feed.animal_type,
            feed.category,
            feed.metabolic_energy,
            feed.protein,
            feed.fat,
            feed.carbohydrates,
            feed.fiber,
            feed.ash,
            feed.moisture,
            feed.calcium,
            feed.phosphorus,
            feed.sodium,
            feed.potassium,
            feed.magnesium,
            feed.iron,
            feed.zinc,
            feed.copper,
            feed.manganese,
            feed.selenium,
            feed.iodine,
            feed.vitamin_a,
            feed.vitamin_d,
            feed.vitamin_e,
            feed.vitamin_k,
            feed.vitamin_b1,
            feed.vitamin_b2,
            feed.vitamin_b3,
            feed.vitamin_b5,
            feed.vitamin_b6,
            feed.vitamin_b7,
            feed.vitamin_b9,
            feed.vitamin_b12,
            feed.vitamin_c,
            feed.ingredients,
            feed.notes,
            feed.price_per_kg,
            feed.is_available ? 1 : 0,
            feed.is_public ? 1 : 0,
            new Date().toISOString(),
            new Date().toISOString()
          ];

          stmt.run(values, function(err) {
            if (err) {
              console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ –∫–æ—Ä–º–∞ ${feed.name}:`, err);
              errors++;
            } else {
              imported++;
            }

            if (imported + errors === feedsData.length) {
              stmt.finalize((finalizeErr) => {
                if (finalizeErr) {
                  console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏:', finalizeErr);
                  return res.status(500).json({
                    success: false,
                    error: '–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏'
                  });
                }

                console.log(`‚úÖ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${imported} –∫–æ—Ä–º–æ–≤ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ, ${errors} –æ—à–∏–±–æ–∫`);
                
                res.json({
                  success: true,
                  message: '–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ',
                  imported,
                  errors,
                  total: feedsData.length
                });
              });
            }
          });
        });
      });
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏:', error);
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

module.exports = router;
