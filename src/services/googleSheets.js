const { google } = require('googleapis');
const { JWT } = require('google-auth-library');
const path = require('path');
const fs = require('fs');

class GoogleSheetsService {
  constructor() {
    this.sheets = null;
    this.spreadsheetId = null;
    this.initialized = false;
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞
  async initialize() {
    try {
      // –ü–æ–ª—É—á–∞–µ–º ID —Ç–∞–±–ª–∏—Ü—ã –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ URL
      const sheetsUrl = process.env.GOOGLE_SHEETS_URL;
      if (!sheetsUrl) {
        throw new Error('GOOGLE_SHEETS_URL –Ω–µ —É–∫–∞–∑–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
      }

      // –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Ç–∞–±–ª–∏—Ü—ã –∏–∑ URL
      this.spreadsheetId = this.extractSpreadsheetId(sheetsUrl);
      if (!this.spreadsheetId) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å ID —Ç–∞–±–ª–∏—Ü—ã –∏–∑ URL');
      }

      // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
      const auth = await this.authenticate();
      this.sheets = google.sheets({ version: 'v4', auth });
      
      this.initialized = true;
      console.log(`‚úÖ Google Sheets —Å–µ—Ä–≤–∏—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã: ${this.spreadsheetId}`);
      
      return true;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Google Sheets —Å–µ—Ä–≤–∏—Å–∞:', error.message);
      return false;
    }
  }

  // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ ID —Ç–∞–±–ª–∏—Ü—ã –∏–∑ URL
  extractSpreadsheetId(url) {
    const match = url.match(/\/spreadsheets\/d\/([a-zA-Z0-9-_]+)/);
    return match ? match[1] : null;
  }

  // –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —á–µ—Ä–µ–∑ Service Account
  async authenticate() {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ –∫–ª—é—á–µ–π
      const keyFilePath = process.env.GOOGLE_SERVICE_ACCOUNT_KEY_FILE || 
                         path.join(__dirname, '../../google-service-account-key.json');
      
      if (fs.existsSync(keyFilePath)) {
        // –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —á–µ—Ä–µ–∑ —Ñ–∞–π–ª –∫–ª—é—á–µ–π
        const keyFile = JSON.parse(fs.readFileSync(keyFilePath, 'utf8'));
        const auth = new JWT({
          email: keyFile.client_email,
          key: keyFile.private_key,
          scopes: ['https://www.googleapis.com/auth/spreadsheets.readonly']
        });
        
        await auth.authorize();
        console.log('üîê –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —á–µ—Ä–µ–∑ Service Account —É—Å–ø–µ—à–Ω–∞');
        return auth;
      } else {
        // –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        const clientEmail = process.env.GOOGLE_SERVICE_ACCOUNT_EMAIL;
        const privateKey = process.env.GOOGLE_PRIVATE_KEY?.replace(/\\n/g, '\n');
        
        if (!clientEmail || !privateKey) {
          throw new Error('–ù–µ –Ω–∞–π–¥–µ–Ω—ã —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Google Service Account');
        }

        const auth = new JWT({
          email: clientEmail,
          key: privateKey,
          scopes: ['https://www.googleapis.com/auth/spreadsheets.readonly']
        });
        
        await auth.authorize();
        console.log('üîê –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–∞');
        return auth;
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ Google Sheets:', error.message);
      throw error;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
  async getFeedsData(range = '–õ–∏—Å—Ç1!A:Z') {
    if (!this.initialized) {
      throw new Error('Google Sheets —Å–µ—Ä–≤–∏—Å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    try {
      const response = await this.sheets.spreadsheets.values.get({
        spreadsheetId: this.spreadsheetId,
        range: range
      });

      const rows = response.data.values;
      if (!rows || rows.length === 0) {
        console.log('‚ö†Ô∏è Google Sheets: —Ç–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞');
        return [];
      }

      console.log(`üìä –ü–æ–ª—É—á–µ–Ω–æ ${rows.length} —Å—Ç—Ä–æ–∫ –∏–∑ Google Sheets`);
      return this.parseFeedsData(rows);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Sheets:', error.message);
      throw error;
    }
  }

  // –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö –∫–æ—Ä–º–æ–≤
  parseFeedsData(rows) {
    if (rows.length < 2) return [];

    const headers = rows[0].map(h => String(h || '').trim());
    const feeds = [];

    // –ò–Ω–¥–µ–∫—Å—ã –∫–æ–ª–æ–Ω–æ–∫
    const idx = {
      name: this.findColumnIndex(headers, ['–Ω–∞–∑–≤', 'name', '–Ω–∞–∑–≤–∞–Ω–∏–µ']),
      brand: this.findColumnIndex(headers, ['–±—Ä–µ–Ω–¥', '—Ç–æ—Ä–≥–æ–≤', '–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å']),
      type: this.findColumnIndex(headers, ['—Ç–∏–ø', '–≤–∏–¥ –∫–æ—Ä–º–∞']),
      animal: this.findColumnIndex(headers, ['—Å–æ–±–∞–∫', '–∫–æ—à', '–≤–∏–¥ –∂–∏–≤–æ—Ç', '–∂–∏–≤–æ—Ç–Ω–æ–µ']),
      category: this.findColumnIndex(headers, ['–∫–∞—Ç–µ–≥–æ—Ä', '–Ω–∞–∑–Ω–∞—á–µ–Ω', '–≤–æ–∑—Ä–∞—Å—Ç', '—Å—Ç–∞–¥–∏—è']),
      me: this.findColumnIndex(headers, ['–º—ç', '–∫–∫–∞–ª/–∫–≥', '—ç–Ω–µ—Ä–≥', '—ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å']),
      protein: this.findColumnIndex(headers, ['–±–µ–ª–æ–∫', '–ø—Ä–æ—Ç–µ–∏–Ω', 'crude protein']),
      fat: this.findColumnIndex(headers, ['–∂–∏—Ä', 'crude fat']),
      fiber: this.findColumnIndex(headers, ['–∫–ª–µ—Ç—á–∞—Ç', 'crude fiber']),
      ash: this.findColumnIndex(headers, ['–∑–æ–ª–∞', 'ash']),
      moisture: this.findColumnIndex(headers, ['–≤–ª–∞–≥–∞', '–≤–ª–∞–∂–Ω', 'moisture']),
      calcium: this.findColumnIndex(headers, ['–∫–∞–ª—å—Ü', 'calcium', 'ca']),
      phosphorus: this.findColumnIndex(headers, ['—Ñ–æ—Å—Ñ–æ—Ä', 'phosphorus', 'p']),
      vitamin_a: this.findColumnIndex(headers, ['–≤–∏—Ç–∞–º–∏–Ω –∞', 'vitamin a', 'a']),
      vitamin_d3: this.findColumnIndex(headers, ['–≤–∏—Ç–∞–º–∏–Ω d', 'vitamin d', 'd3']),
      ingredients: this.findColumnIndex(headers, ['–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç', '—Å–æ—Å—Ç–∞–≤', 'ingredients'])
    };

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö
    for (let i = 1; i < rows.length; i++) {
      const row = rows[i];
      if (!row || row.length === 0) continue;

      const feed = this.parseFeedRow(row, idx, headers);
      if (feed) {
        feeds.push(feed);
      }
    }

    console.log(`‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω: ${feeds.length} –∫–æ—Ä–º–æ–≤`);
    return feeds;
  }

  // –ü–æ–∏—Å–∫ –∏–Ω–¥–µ–∫—Å–∞ –∫–æ–ª–æ–Ω–∫–∏ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
  findColumnIndex(headers, keywords) {
    return headers.findIndex(h => {
      const low = h.toLowerCase();
      return keywords.some(keyword => low.includes(keyword.toLowerCase()));
    });
  }

  // –ü–∞—Ä—Å–∏–Ω–≥ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –∫–æ—Ä–º–∞
  parseFeedRow(row, idx, headers) {
    try {
      const name = String(row[idx.name] || '').trim();
      const brand = String(row[idx.brand] || '').trim();
      
      if (!name) return null;

      const feed = {
        name: name,
        brand: brand,
        type: this.mapFeedType(row[idx.type]),
        animal_type: this.mapAnimalType(row[idx.animal]),
        category: this.mapCategory(row[idx.category]),
        metabolic_energy: this.toNumber(row[idx.me]),
        protein: this.toNumber(row[idx.protein]),
        fat: this.toNumber(row[idx.fat]),
        fiber: this.toNumber(row[idx.fiber]),
        ash: this.toNumber(row[idx.ash]),
        moisture: this.toNumber(row[idx.moisture]),
        calcium: this.normalizeCaP(row[idx.calcium], headers[idx.calcium]),
        phosphorus: this.normalizeCaP(row[idx.phosphorus], headers[idx.phosphorus]),
        vitamin_a: this.toNumber(row[idx.vitamin_a]),
        vitamin_d: this.toNumber(row[idx.vitamin_d3]),
        ingredients: String(row[idx.ingredients] || ''),
        // –í—ã—á–∏—Å–ª—è–µ–º —É–≥–ª–µ–≤–æ–¥—ã
        carbohydrates: this.calculateCarbohydrates(row, idx),
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        sodium: 0,
        potassium: 0,
        magnesium: 0,
        iron: 0,
        zinc: 0,
        copper: 0,
        manganese: 0,
        selenium: 0,
        iodine: 0,
        vitamin_e: 0,
        vitamin_k: 0,
        vitamin_b1: 0,
        vitamin_b2: 0,
        vitamin_b3: 0,
        vitamin_b5: 0,
        vitamin_b6: 0,
        vitamin_b7: 0,
        vitamin_b9: 0,
        vitamin_b12: 0,
        vitamin_c: 0,
        notes: '',
        price_per_kg: 1000,
        is_available: true,
        is_public: true
      };

      return feed;
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä–æ–∫–∏ ${row}:`, error.message);
      return null;
    }
  }

  // –ú–∞–ø–ø–∏–Ω–≥ —Ç–∏–ø–∞ –∫–æ—Ä–º–∞
  mapFeedType(type) {
    if (!type) return 'dry';
    const s = String(type).toLowerCase();
    if (s.includes('—Å—É—Ö')) return 'dry';
    if (s.includes('–≤–ª–∞–∂')) return 'wet';
    if (s.includes('–ª–∞–∫–æ–º') || s.includes('–¥–æ–ø–æ–ª–Ω') || s.includes('treat')) return 'treats';
    return 'dry';
  }

  // –ú–∞–ø–ø–∏–Ω–≥ —Ç–∏–ø–∞ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ
  mapAnimalType(animal) {
    if (!animal) return 'dog';
    const s = String(animal).toLowerCase();
    if (s.includes('–∫–æ—à')) return 'cat';
    if (s.includes('—Å–æ–±')) return 'dog';
    if (s.includes('both') || s.includes('–æ–±–∞')) return 'both';
    return 'dog';
  }

  // –ú–∞–ø–ø–∏–Ω–≥ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  mapCategory(category) {
    if (!category) return 'adult';
    const s = String(category).toLowerCase();
    if (s.includes('—â–µ–Ω') || s.includes('–∫–æ—Ç–µ–Ω')) return 'puppy_small';
    if (s.includes('–ø–æ–∂–∏–ª') || s.includes('senior')) return 'senior';
    if (s.includes('–≤–µ—Å') || s.includes('–ø–æ—Ö—É–¥') || s.includes('weight')) return 'weight_loss';
    if (s.includes('–¥–∏–µ—Ç') || s.includes('therap')) return 'diet';
    return 'adult';
  }

  // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ —á–∏—Å–ª–æ
  toNumber(value) {
    if (value === undefined || value === null) return 0;
    if (typeof value === 'number') return value;
    const s = String(value).replace(/[^0-9,\.\-]/g, '').replace(',', '.');
    const n = parseFloat(s);
    return Number.isFinite(n) ? n : 0;
  }

  // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞–ª—å—Ü–∏—è –∏ —Ñ–æ—Å—Ñ–æ—Ä–∞
  normalizeCaP(value, header) {
    const n = this.toNumber(value);
    const h = String(header || '').toLowerCase();
    if (h.includes('–º–≥') || n > 10) return n; // —É–∂–µ –º–≥/100–≥
    return Math.round(n * 1000); // % -> –º–≥/100–≥
  }

  // –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —É–≥–ª–µ–≤–æ–¥–æ–≤
  calculateCarbohydrates(row, idx) {
    const protein = this.toNumber(row[idx.protein]);
    const fat = this.toNumber(row[idx.fat]);
    const fiber = this.toNumber(row[idx.fiber]);
    const ash = this.toNumber(row[idx.ash]);
    const moisture = this.toNumber(row[idx.moisture]);
    
    if (protein || fat || fiber || ash || moisture) {
      return Math.max(0, 100 - (protein + fat + fiber + ash + moisture));
    }
    return 0;
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ç–∞–±–ª–∏—Ü—ã
  async checkAccess() {
    try {
      if (!this.initialized) {
        await this.initialize();
      }
      
      const response = await this.sheets.spreadsheets.get({
        spreadsheetId: this.spreadsheetId
      });
      
      return {
        accessible: true,
        title: response.data.properties.title,
        sheets: response.data.sheets.map(s => s.properties.title)
      };
    } catch (error) {
      return {
        accessible: false,
        error: error.message
      };
    }
  }
}

module.exports = new GoogleSheetsService();
