#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–æ—Ä–º–æ–≤ –∏–∑ Google Sheets
 * –ó–∞–ø—É—Å–∫: node sync-feeds.js
 */

require('dotenv').config();
const googleSheetsService = require('./src/services/googleSheets');
const { getDatabase } = require('./src/database');

async function syncFeeds() {
  console.log('üîÑ –ó–∞–ø—É—Å–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–æ—Ä–º–æ–≤ –∏–∑ Google Sheets...\n');

  try {
    // 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞
    console.log('1Ô∏è‚É£ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Sheets —Å–µ—Ä–≤–∏—Å–∞...');
    const initialized = await googleSheetsService.initialize();
    if (!initialized) {
      console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–µ—Ä–≤–∏—Å');
      return;
    }
    console.log('‚úÖ –°–µ—Ä–≤–∏—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');

    // 2. –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    console.log('\n2Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Sheets...');
    const feedsData = await googleSheetsService.getFeedsData();
    if (feedsData.length === 0) {
      console.log('‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏');
      return;
    }
    console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${feedsData.length} –∫–æ—Ä–º–æ–≤`);

    // 3. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    console.log('\n3Ô∏è‚É£ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
    const db = getDatabase();
    console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞');

    // 4. –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ø—É–±–ª–∏—á–Ω—ã—Ö –∫–æ—Ä–º–æ–≤
    console.log('\n4Ô∏è‚É£ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ø—É–±–ª–∏—á–Ω—ã—Ö –∫–æ—Ä–º–æ–≤...');
    await new Promise((resolve, reject) => {
      db.run('DELETE FROM feeds WHERE user_id IS NULL', (err) => {
        if (err) reject(err);
        else resolve();
      });
    });
    console.log('‚úÖ –°—Ç–∞—Ä—ã–µ –∫–æ—Ä–º–∞ —É–¥–∞–ª–µ–Ω—ã');

    // 5. –í—Å—Ç–∞–≤–∫–∞ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    console.log('\n5Ô∏è‚É£ –í—Å—Ç–∞–≤–∫–∞ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
    const stmt = db.prepare(`
      INSERT INTO feeds (
        user_id, name, brand, type, animal_type, category, metabolic_energy, 
        protein, fat, carbohydrates, fiber, ash, moisture, calcium, phosphorus,
        sodium, potassium, magnesium, iron, zinc, copper, manganese, selenium, iodine,
        vitamin_a, vitamin_d, vitamin_e, vitamin_k, vitamin_b1, vitamin_b2, vitamin_b3,
        vitamin_b5, vitamin_b6, vitamin_b7, vitamin_b9, vitamin_b12, vitamin_c,
        ingredients, notes, price_per_kg, is_available, is_public, created_at, updated_at
      ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
    `);

    let imported = 0;
    let errors = 0;

    for (const feed of feedsData) {
      try {
        const values = [
          null, // user_id (NULL –¥–ª—è –ø—É–±–ª–∏—á–Ω—ã—Ö –∫–æ—Ä–º–æ–≤)
          feed.name,
          feed.brand,
          feed.type,
          feed.animal_type,
          feed.category,
          feed.metabolic_energy,
          feed.protein,
          feed.fat,
          feed.carbohydrates,
          feed.fiber,
          feed.ash,
          feed.moisture,
          feed.calcium,
          feed.phosphorus,
          feed.sodium,
          feed.potassium,
          feed.magnesium,
          feed.iron,
          feed.zinc,
          feed.copper,
          feed.manganese,
          feed.selenium,
          feed.iodine,
          feed.vitamin_a,
          feed.vitamin_d,
          feed.vitamin_e,
          feed.vitamin_k,
          feed.vitamin_b1,
          feed.vitamin_b2,
          feed.vitamin_b3,
          feed.vitamin_b5,
          feed.vitamin_b6,
          feed.vitamin_b7,
          feed.vitamin_b9,
          feed.vitamin_b12,
          feed.vitamin_c,
          feed.ingredients,
          feed.notes,
          feed.price_per_kg,
          feed.is_available ? 1 : 0,
          feed.is_public ? 1 : 0,
          new Date().toISOString(),
          new Date().toISOString()
        ];

        stmt.run(values);
        imported++;
        console.log(`‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω: ${feed.name} (${feed.brand})`);
      } catch (error) {
        errors++;
        console.error(`‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ ${feed.name}:`, error.message);
      }
    }

    // 6. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ
    stmt.finalize((err) => {
      if (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è:', err);
      } else {
        console.log('\nüéâ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
        console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
        console.log(`   ‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: ${imported}`);
        console.log(`   ‚ùå –û—à–∏–±–æ–∫: ${errors}`);
        console.log(`   üì¶ –í—Å–µ–≥–æ: ${feedsData.length}`);
        
        // –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        db.get('SELECT COUNT(*) as total FROM feeds WHERE user_id IS NULL', (err, result) => {
          if (!err) {
            console.log(`   üóÑÔ∏è –í –±–∞–∑–µ: ${result.total} –ø—É–±–ª–∏—á–Ω—ã—Ö –∫–æ—Ä–º–æ–≤`);
          }
          process.exit(0);
        });
      }
    });

  } catch (error) {
    console.error('\n‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error.message);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
if (require.main === module) {
  syncFeeds();
}

module.exports = { syncFeeds };

